{
    "collab_server" : "",
    "contents" : "# demos\n\nglobalVariables(c(\"x\", \"olympic\", \"sd\",\"marks\",\"iris\"))\n\ndemo1 = function(n=100, st=TRUE){ # approximately Gaussian quantile\n  if(n > 2000 && st) stop(\"too large n\")\n  Y = ogi.value(ord.example(n))\n  graphics::plot((1:n)/(n+1), Y, type=\"b\")\n  xs = (1:1000)/1001\n  graphics::points(xs, stats::qnorm(xs), type=\"l\", col=\"red\")\n}\n\ndemo2 = function(mar=FALSE){ # example of two-way table\n  CT = matrix(c(\n    2,1,1,0,0,\n    8,3,3,0,0,\n    0,2,1,1,1,\n    0,0,0,1,1,\n    0,0,0,0,1), 5, 5, byrow=TRUE)\n  X = matrix(0, 0, 2)\n  for(i in 1:5){\n    for(j in 1:5){\n      if(CT[i,j]>0){\n        X = rbind(X, matrix(c(6-i,6-j), CT[i,j], 2, byrow=TRUE))\n      }\n    }\n  }\n  X0 = X\n  X = as.data.frame(X0)\n  X[,1] = factor(X0[,1], ordered=TRUE)\n  X[,2] = factor(X0[,2], ordered=TRUE)\n  ogiX = ogi(X, mar=mar)\n  #\tplot(c(0,6),c(0,6),type=\"n\")\n  #\ttext(X0[,1], X0[,2], round(ogiX$value,2))\n  graphics::par(pty=\"s\", cex=1.7, mar=c(4.5,3,1,1))\n  graphics::plot(ogiX$scaled, xlim=c(-3,3), ylim=c(-3,3), xlab=\"Geometry\", ylab=\"Probability\")\n  for(t in 1:nrow(ogiX$scaled)){\n    xy = ogiX$scaled[t,]\n    g = rep(sum(xy)/2, 2)\n    graphics::segments(xy[1], xy[2], g[1], g[2], lty=2)\n  }\n  graphics::arrows(-3, -3, 3, 3)\n  graphics::text(2.5, 2, \"OGI/2\")\n  ogiX\n}\n\ndemo3 = function(p=10, tau=0.5, rho=0.5){ # large weight\n  # condition: -1/(p-2) < tau < 1, |rho| < sqrt((1+(p-2)tau)/(p-1))\n  S = matrix(0, p, p)\n  S[1,1] = 1\n  for(j in 2:p) S[1,j] = S[j,1] = -rho\n  for(i in 2:p){\n    for(j in 2:p){\n      if(i == j) S[i,j] = 1\n      else S[i,j] = tau\n    }\n  }\n  list(B=cov2biu(S), weight=cov2weight(S))\n}\n\ndemo4 = function(se=FALSE){\n  Xori = utils::read.csv(\"baseball2014.csv\")\n  X = Xori[,-c(1,2)]\n  rownames(X) = X[,1]\n  X[,c(12,22,23)] = X[,c(12,22,23)] * (-1)\n  ogi(X, force=TRUE, se=se)\n}\n\ndemo5 = function(q = 10){\n  p = stats::pbinom(0:(q-1), q, 0.5) # binomial\n  S = matrix(0, q, q)\n  for(i in 1:q){\n    for(j in 1:q){\n      k = min(i,j)\n      S[i,j] = p[k] - p[i] * p[j]\n    }\n  }\n  methods::show(S)\n  methods::show(eigen(S))\n  d = cov2weight(S)\n  e = sqrt(diag(S))\n  graphics::plot(c(0, cumsum(e)), (c(0, cumsum(d)) - sum(d)/2)/sqrt(q), ylim=c(-3,3))\n  d\n}\n\ndemo6 = function(q=2){\n  d2 = function(z, q=2) sqrt( (2+(q-1)*z^2-z*sqrt(4*q+(q-1)^2*z^2)) / 2 / (1-z^2) )\n  d1 = function(z, q=2) sqrt(d2(z,q)^2+q-1)/q\n  graphics::curve(d2(x,q) / d1(x,q), -1, 1)\n}\n\ndemo7 = function(){\n  X = datasets::iris[,1:4]\n  graphics::plot(rowSums(my.scale(X)), ogi.value(X), col=iris[,5])\n}\n\ndemo8 = function(eps=FALSE){ # decathlon 1988\n  set.seed(20150620)\n  # library(ade4)\n  if (!requireNamespace(\"ade4\", quietly = TRUE)) {\n    stop(\"The package ade4 is required. Please install it.\", call. = FALSE)\n  }\n  utils::data(olympic)\n  Xori = olympic$tab\n  # 100, long, shotput, high, 400, 110H, disc, pole, javelin, 1500\n  names(Xori) = c(\"100m\", \"Long Jump\", \"Shot\", \"High Jump\", \"400m\", \"110mH\", \"Discus\", \"Pole Vault\", \"Javelin\", \"1500m\")\n\n  # scoring\n  # http://www.decathlon2000.com/upload/file/pdf/scoringtables.pdf\n  P = matrix(0, nrow(Xori), ncol(Xori))\n  abct = matrix(c(\n    25.4347, 18.00, 1.81, 1,  # 100m\n    0.14354, 220.00, 1.40, 2, # Long Jump\n    51.39, 1.50, 1.05, 3,     # Shot\n    0.8465, 75.00, 1.42, 2,   # High Jump\n    1.53775, 82.00, 1.81, 1,   # 400m\n    5.74352, 28.50, 1.92, 1,  # 110mH\n    12.91, 4.00, 1.10, 3,     # Discus\n    0.2797, 100.00, 1.35, 2,  # Pole Vault\n    10.14, 7.00, 1.08, 3,     # Javelin\n    0.03768, 480.00, 1.85, 1  # 1500m\n  ), 10, 4, byrow=TRUE)\n  for(j in 1:10){\n    a = abct[j,1]; b = abct[j,2]; c = abct[j,3]; t = abct[j,4]\n    if(t == 1) P[,j] = a * (b - Xori[,j])^c  # track events\n    if(t == 2) P[,j] = a * (100*Xori[,j] - b)^c  # jumps\n    if(t == 3) P[,j] = a * (Xori[,j] - b)^c  # throws\n  }\n  P = floor(P)\n  rowSums(P)  # score\n  olympic$score  # score (a little different?)\n\n  #\tresP = ogi(my.scale(P), se=TRUE)\n  resP = ogi(P, se=TRUE)\n  graphics::plot(rowSums(P), resP$value, xlab=\"score\", ylab=\"OGI\")\n  if(eps) grDevices::dev.copy2eps(file=\"demo8c.eps\")\n\n  X = Xori\n  X[,c(1,5,6,10)] = -X[,c(1,5,6,10)]\n  resX = ogi(my.scale(X), se=TRUE)\n\n  graphics::par(cex=1.5, mar=c(5,4,2,2))\n  nameX = ordered(names(X), names(X))\n  graphics::plot(nameX, resX$weight, ylim=c(0, max(resX$weight + resX$w.se)), las=3, cex.axis=0.8, ylab=\"relative weight\")\n  graphics::segments(1:10,resX$weight-resX$w.se, 1:10,resX$weight+resX$w.se)\n  #\tarrows(1:10,resX$weight-resX$w.se, 1:10,resX$weight+resX$w.se, angle=90, length=0.03)\n  #\tarrows(1:10,resX$weight+resX$w.se, 1:10,resX$weight-resX$w.se, angle=90, length=0.03)\n  if(eps) grDevices::dev.copy2eps(file=\"demo8a.eps\")\n\n  # weight of OGI\n  graphics::plot(nameX, resP$weight, ylim=c(0, max(resP$weight + resP$w.se)), las=3, cex.axis=0.8, ylab=\"weight\")\n  graphics::segments(1:10,resP$weight-resP$w.se, 1:10,resP$weight+resP$w.se)\n  if(eps) grDevices::dev.copy2eps(file=\"demo8b.eps\")\n\n  # weight of scale sum\n  n = nrow(P)\n  w = 1 / (apply(P, 2, sd) * sqrt((n-1) / n))\n  se.loop = 1000\n  wB = matrix(0, length(w), se.loop)\n  n = nrow(P)\n  for(i in 1:se.loop){\n    PB = P[sample(1:n, n, replace=TRUE),]\n    wB[,i] = 1 / (apply(PB, 2, sd) * sqrt((n-1) / n))\n  }\n  w.se = apply(wB, 1, sd)\n  graphics::plot(nameX, w, ylim=c(0, max(w + w.se)), las=3, cex.axis=0.8, ylab=\"weight\")\n  graphics::segments(1:10, w - w.se, 1:10, w + w.se)\n  if(eps) grDevices::dev.copy2eps(file=\"demo8d.eps\")\n\n  #\tOGI = result$value; v.se = result$v.se\n  #\tymax = max(OGI + v.se); ymin = min(OGI - v.se)\n  #\tplot(olympic$score, OGI, ylim=c(ymin,ymax), xlab=\"official record\", ylab=\"OGI\")\n  #\tsegments(olympic$score, OGI-v.se, olympic$score, OGI+v.se)\n\n  resP\n}\n\ndemo8a = function(eps=FALSE){ # decathlon 1991 -- 2007\n  Xori = utils::read.csv(\"decathlon.csv\")\n  #\tXori = Xori[Xori[,1] != 1991, -1]\n  Xori = Xori[, -1]\n  names(Xori) = c(\"100m\", \"Long Jump\", \"Shot\", \"High Jump\", \"400m\", \"110mH\", \"Discus\", \"Pole Vault\", \"Javelin\", \"1500m\")\n\n  Xori = Xori[Xori[,6] < 25, ]  # remove an outlier\n\n  # scoring\n  # http://www.decathlon2000.com/upload/file/pdf/scoringtables.pdf\n  P = matrix(0, nrow(Xori), ncol(Xori))\n  abct = matrix(c(\n    25.4347, 18.00, 1.81, 1,  # 100m\n    0.14354, 220.00, 1.40, 2, # Long Jump\n    51.39, 1.50, 1.05, 3,     # Shot\n    0.8465, 75.00, 1.42, 2,   # High Jump\n    1.53775, 82.00, 1.81, 1,   # 400m\n    5.74352, 28.50, 1.92, 1,  # 110mH\n    12.91, 4.00, 1.10, 3,     # Discus\n    0.2797, 100.00, 1.35, 2,  # Pole Vault\n    10.14, 7.00, 1.08, 3,     # Javelin\n    0.03768, 480.00, 1.85, 1  # 1500m\n  ), 10, 4, byrow=TRUE)\n  for(j in 1:10){\n    a = abct[j,1]; b = abct[j,2]; c = abct[j,3]; t = abct[j,4]\n    if(t == 1) P[,j] = a * (b - Xori[,j])^c  # track events\n    if(t == 2) P[,j] = a * (100*Xori[,j] - b)^c  # jumps\n    if(t == 3) P[,j] = a * (Xori[,j] - b)^c  # throws\n  }\n  P = floor(P)\n  rowSums(P)  # score\n\n  resP = ogi(P, se=TRUE)\n  graphics::plot(rowSums(P), resP$value, xlab=\"score\", ylab=\"OGI\")\n  if(eps) grDevices::dev.copy2eps(file=\"demo8c.eps\")\n\n  X = Xori\n  X[,c(1,5,6,10)] = -X[,c(1,5,6,10)]\n  resX = ogi(my.scale(X), se=TRUE)\n\n  graphics::par(cex=1.5, mar=c(5,4,2,2))\n  nameX = ordered(names(X), names(X))\n  graphics::plot(nameX, resX$weight, ylim=c(0, max(resX$weight + resX$w.se)), las=3, cex.axis=0.8, ylab=\"relative weight\")\n  graphics::segments(1:10,resX$weight-resX$w.se, 1:10,resX$weight+resX$w.se)\n  #\tarrows(1:10,resX$weight-resX$w.se, 1:10,resX$weight+resX$w.se, angle=90, length=0.03)\n  #\tarrows(1:10,resX$weight+resX$w.se, 1:10,resX$weight-resX$w.se, angle=90, length=0.03)\n  if(eps) grDevices::dev.copy2eps(file=\"demo8a.eps\")\n\n  # weight of OGI\n  graphics::plot(nameX, resP$weight, ylim=c(0, max(resP$weight + resP$w.se)), las=3, cex.axis=0.8, ylab=\"weight\")\n  graphics::segments(1:10,resP$weight-resP$w.se, 1:10,resP$weight+resP$w.se)\n  if(eps) grDevices::dev.copy2eps(file=\"demo8b.eps\")\n\n  # weight of scale sum\n  n = nrow(P)\n  w = 1 / (apply(P, 2, sd) * sqrt((n-1) / n))\n  se.loop = 1000\n  wB = matrix(0, length(w), se.loop)\n  n = nrow(P)\n  for(i in 1:se.loop){\n    PB = P[sample(1:n, n, replace=TRUE),]\n    wB[,i] = 1 / (apply(PB, 2, sd) * sqrt((n-1) / n))\n  }\n  w.se = apply(wB, 1, sd)\n  graphics::plot(nameX, w, ylim=c(0, max(w + w.se)), las=3, cex.axis=0.8, ylab=\"weight\")\n  graphics::segments(1:10, w - w.se, 1:10, w + w.se)\n  if(eps) grDevices::dev.copy2eps(file=\"demo8d.eps\")\n\n  #\tOGI = result$value; v.se = result$v.se\n  #\tymax = max(OGI + v.se); ymin = min(OGI - v.se)\n  #\tplot(olympic$score, OGI, ylim=c(ymin,ymax), xlab=\"official record\", ylab=\"OGI\")\n  #\tsegments(olympic$score, OGI-v.se, olympic$score, OGI+v.se)\n\n  resP\n}\n\ndemo9 = function(){ # marks data\n  # library(bnlearn)\n  if (!requireNamespace(\"bnlearn\", quietly = TRUE)) {\n    stop(\"The package bnlearn is required. Please install it.\", call. = FALSE)\n  }\n  utils::data(marks)\n  X = marks\n  ogi(X, se=TRUE)\n}\n\ndemo10 = function(){ # figure skating\n  # Sochi, Ladies, Free Skating (FS)\n  # http://www.isuresults.com/results/owg2014/SEG004.HTM\n  FS = utils::read.table(\"FS.txt\", sep=\"\\t\", header=TRUE)\n  X = FS[,c(\"TES\", \"SS\", \"TR\", \"PE\", \"CH\", \"IN\", \"Ded.\")]\n  X[,7] = X[,7] * (-1)\n  nu = c(.80, rep(.16, 5), .01)^2\n  ogiX = ogi(X, nu=nu, se=TRUE)\n  TSS = FS[,\"TSS\"]\n  #\tshow(TSS - as.matrix(X) %*% c(1,rep(1.6,5),1))  # check\n  graphics::plot(TSS, ogiX$value, type=\"n\", ylab=\"OGI\")\n  graphics::text(TSS, ogiX$value, 1:nrow(X))\n  ogiX\n}\n\ndemo11 = function(nu=1/2, n=100, add=FALSE, lty=1, lwd=1){ # geostatistics\n  if(nu <= 0) stop(\"not appropriate nu\")\n  rho = 1\n  xi = seq(0, 1, len=n)\n  Dxi = abs(outer(xi, xi, \"-\"))\n  S = ifelse(Dxi != 0, 1/gamma(nu)/2^(nu-1) * (Dxi/rho)^nu * besselK(Dxi/rho, nu), 1) # Matern class\n  w = cov2weight(S)\n  if(!add) graphics::plot(xi, w, type=\"l\", ylim=c(0, max(w)), lty=lty, xlab=expression(xi), lwd=lwd)\n  if(add) graphics::points(xi, w, type=\"l\", lty=lty, lwd=lwd)\n  invisible(w)\n}\nif(FALSE){\n  par(cex=1.4, mar=c(5,4,2,2))\n  demo11(.1, lwd=2)\n  graphics::text(0.7, 0.20, expression(paste(nu, \"=0.1\")))\n  demo11(.5, add=TRUE, lty=2, lwd=2)\n  graphics::text(0.9, 0.14, expression(paste(nu, \"=0.5\")))\n  demo11(1, add=TRUE, lty=4, lwd=2)\n  graphics::text(0.9, 0.10, expression(paste(nu, \"=1.0\")))\n  dev.copy2eps(file=\"demo11.eps\")\n}\n\ndemo12 = function(){ # Times higher education\n  # https://www.timeshighereducation.co.uk/world-university-rankings/2014-15/world-ranking\n  Xori = utils::read.csv(\"univ.csv\")\n  w = !is.na(Xori[,7])  # missing values\n  X = as.matrix(Xori[,4:9])/100\n  # overall, teaching, international, industry, research, citations\n  nu = c(100, 30, 7.5, 2.5, 30, 30)/100\n  #\tplot(X[,1], X[,2:6] %*% nu.sqrt[2:6])\n  #\tshow(X[,1] - X[,2:6] %*% nu.sqrt[2:6])\n  #\tX = qnorm(as.matrix(Xori[w,4:9])/100)\n  #\tX = qnorm(as.matrix(Xori[,4:9])/100)\n  ogiX = ogi(X[w,2:6], nu=nu[2:6], se=TRUE)\n  graphics::plot(X[w,1], ogiX$value, type=\"n\", ylab=\"OGI\")\n  graphics::text(X[w,1], ogiX$value, 1:nrow(X[w,]))\n  ogiX\n}\n\ndemo13 = function(){ # parallel coordinate plot\n  X = datasets::USJudgeRatings\n  lam = eigen(stats::cor(X))$vec[,1]\n  graphics::par(mfrow=c(2,2))\n  graphics::matplot(t(X), type=\"l\", ylab=\"raw\", col=1, lty=1)\n  graphics::matplot(t(my.scale(X)), type=\"l\", ylab=\"standardized\", col=1, lty=1)\n  graphics::matplot(t(my.scale(X) %*% diag(lam)), type=\"l\", ylab=\"textile\", col=1, lty=1)\n  graphics::matplot(t(ogi.scale(X)), type=\"l\", ylab=\"OGI\", col=1, lty=1)\n}\n\ndemo14 = function(){ # USJudgeRatings\n  set.seed(20150620)\n  X = datasets::USJudgeRatings\n  p = ncol(X)\n  resX = ogi(X, se=TRUE)\n  graphics::par(cex=1.5, mar=c(5,4,2,2))\n  nameX = ordered(names(X), names(X))\n  graphics::plot(nameX, resX$weight, ylim=c(0, max(resX$weight + resX$w.se)), las=3, cex.axis=0.8, ylab=\"relative weight\")\n  graphics::segments(1:p, resX$weight-resX$w.se, 1:p, resX$weight+resX$w.se)\n  #\tdev.copy2eps(file=\"demo14.eps\")\n}\n\nif(FALSE){  # garbage\n  king = read.table(\"king_eng.txt\", header=TRUE)\n  king[,c(1, 5, 6, 10)] = king[,c(1, 5, 6, 10)] * (-1)\n\n  test1 = matrix(-7/12, 3, 3)\n  test1[2:3,2:3] = 0\n  diag(test1) = rep(1,3)\n}\n",
    "created" : 1512811236665.000,
    "dirty" : false,
    "encoding" : "ASCII",
    "folds" : "",
    "hash" : "557989570",
    "id" : "CCF1D96A",
    "lastKnownWriteTime" : 1512815655,
    "last_content_update" : 1512815655798,
    "path" : "C:/OGI_package/OGI/R/demos.R",
    "project_path" : "R/demos.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}